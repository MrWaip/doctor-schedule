{"version":3,"sources":["plugins/axios.ts","pages/Schedule.tsx","pages/Registration.tsx","App.tsx","index.tsx"],"names":["client","Axios","create","baseURL","defaultValues","doctor","date","Schedule","useForm","control","errors","handleSubmit","useState","dates","setDates","doctors","setDoctors","results","setResults","open","setOpen","loading","setLoading","search","payload","a","get","params","value","id","data","deleteSchedule","delete","newResults","filter","i","useEffect","fetchDoctors","fetchDates","Grid","container","direction","item","xs","Typography","className","variant","onSubmit","spacing","md","name","rules","required","render","props","Autocomplete","onChange","_","getOptionSelected","val","option","options","getOptionLabel","full_name","size","renderInput","TextField","error","helperText","label","renderOption","inputValue","matches","match","parts","parse","map","part","index","key","style","highlight","background","text","humanVariant","Button","color","type","TableContainer","component","Paper","LinearProgress","Table","TableHead","TableRow","TableCell","align","TableBody","row","scope","patient_name","time","complaints","IconButton","onClick","Delete","Snackbar","autoHideDuration","onClose","severity","patient","defaultLoading","times","register","Registration","setTimes","fetchTimes","reset","post","newTimes","allowed","Card","CardContent","FormControl","fullWidth","placeholder","inputRef","margin","fontWeight","getOptionDisabled","multiline","rows","App","CssBaseline","AppBar","position","Toolbar","Container","maxWidth","Link","to","path","exact","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.533c6c09.chunk.js","sourcesContent":["import Axios from 'axios';\r\n\r\nconst client = Axios.create({\r\n  baseURL: 'http://localhost:3080/api',\r\n});\r\n\r\nexport { client };\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Typography,\r\n  Button,\r\n  TableHead,\r\n  TableCell,\r\n  TableRow,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  IconButton,\r\n  TextField,\r\n  Grid,\r\n  Snackbar,\r\n  LinearProgress,\r\n} from '@material-ui/core';\r\nimport '../styles/Schedule.scss';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport match from 'autosuggest-highlight/match';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { client } from '../plugins/axios';\r\nimport { SearchForm, Date, Doctor, ScheduleRecord } from '../types';\r\n\r\nconst defaultValues: SearchForm = {\r\n  doctor: null,\r\n  date: null,\r\n};\r\n\r\nconst Schedule = () => {\r\n  const { control, errors, handleSubmit } = useForm<SearchForm>({ defaultValues });\r\n  const [dates, setDates] = useState<Date[]>([]);\r\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\r\n  const [results, setResults] = useState<ScheduleRecord[]>([]);\r\n  const [open, setOpen] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const search = async (payload: SearchForm) => {\r\n    setLoading(true);\r\n    const { data } = await client.get<ScheduleRecord[]>('schedule', {\r\n      params: { date: payload.date?.value, doctor: payload.doctor?.id },\r\n    });\r\n    setResults(data);\r\n    setLoading(false);\r\n  };\r\n\r\n  const deleteSchedule = async (id: number) => {\r\n    setLoading(true);\r\n    await client.delete(`schedule/${id}`);\r\n    setLoading(false);\r\n    const newResults = results.filter((i) => i.id != id);\r\n    setResults(newResults);\r\n    setOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      const { data } = await client.get<Doctor[]>('doctors');\r\n      setDoctors(data);\r\n    };\r\n\r\n    const fetchDates = async () => {\r\n      const { data } = await client.get<Date[]>('dates');\r\n      setDates(data);\r\n    };\r\n\r\n    fetchDoctors();\r\n    fetchDates();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"column\">\r\n        <Grid item xs={12}>\r\n          <Typography className=\"schedule__title\" variant=\"h5\">\r\n            Журнал записи\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <form onSubmit={handleSubmit(search)}>\r\n        <Grid container item xs={12} spacing={1}>\r\n          <Grid item xs={6} md={3}>\r\n            <Controller\r\n              name=\"doctor\"\r\n              rules={{ required: true }}\r\n              control={control}\r\n              render={(props) => (\r\n                <Autocomplete\r\n                  {...props}\r\n                  onChange={(_, doctor) => props.onChange(doctor)}\r\n                  getOptionSelected={(val, option) => val.id === option.id}\r\n                  options={doctors}\r\n                  getOptionLabel={(option) => option.full_name}\r\n                  size=\"small\"\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      error={!!errors.doctor}\r\n                      helperText={errors.doctor && 'Вы должы указать доктора'}\r\n                      label=\"Доктор\"\r\n                      variant=\"outlined\"\r\n                    />\r\n                  )}\r\n                  renderOption={(option, { inputValue }) => {\r\n                    const matches = match(option.full_name, inputValue);\r\n                    const parts = parse(option.full_name, matches);\r\n\r\n                    return (\r\n                      <div>\r\n                        {parts.map((part, index) => (\r\n                          <span key={`highlight_${index}`} style={part.highlight ? { background: '#faea2d' } : {}}>\r\n                            {part.text}\r\n                          </span>\r\n                        ))}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6} md={3}>\r\n            <Controller\r\n              name=\"date\"\r\n              rules={{ required: true }}\r\n              control={control}\r\n              render={(props) => (\r\n                <Autocomplete\r\n                  {...props}\r\n                  onChange={(_, date) => props.onChange(date)}\r\n                  getOptionSelected={(date, option) => date.value === option.value}\r\n                  options={dates}\r\n                  getOptionLabel={(option) => option.humanVariant}\r\n                  size=\"small\"\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      error={!!errors.date}\r\n                      helperText={errors.date && 'Вы должы указать дату'}\r\n                      label=\"Дата\"\r\n                      variant=\"outlined\"\r\n                    />\r\n                  )}\r\n                  renderOption={(option, { inputValue }) => {\r\n                    const matches = match(option.humanVariant, inputValue);\r\n                    const parts = parse(option.humanVariant, matches);\r\n\r\n                    return (\r\n                      <div>\r\n                        {parts.map((part, index) => (\r\n                          <span key={index} style={part.highlight ? { background: '#faea2d' } : {}}>\r\n                            {part.text}\r\n                          </span>\r\n                        ))}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Найти\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n      <TableContainer className=\"schedule__table\" component={Paper}>\r\n        {loading && <LinearProgress color=\"secondary\" />}\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Пациент</TableCell>\r\n              <TableCell>Время</TableCell>\r\n              <TableCell>Жалобы</TableCell>\r\n              <TableCell align=\"center\">Действия</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {results.map((row) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.patient_name}\r\n                </TableCell>\r\n                <TableCell>{row.time}</TableCell>\r\n                <TableCell>{row.complaints}</TableCell>\r\n                <TableCell align=\"center\">\r\n                  <IconButton onClick={() => deleteSchedule(row.id)}>\r\n                    <Delete />\r\n                  </IconButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={() => setOpen(false)}>\r\n        <MuiAlert onClose={() => setOpen(false)} severity=\"success\">\r\n          Вы успешно записались к врачу!\r\n        </MuiAlert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { Schedule };\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Typography, Card, CardContent, TextField, FormControl, Button, LinearProgress, Snackbar } from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport '../styles/Registration.scss';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport match from 'autosuggest-highlight/match';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { client } from '../plugins/axios';\r\nimport { RegForm, Loading, Doctor, Time } from '../types';\r\n\r\nconst defaultValues: RegForm = {\r\n  complaints: '',\r\n  doctor: null,\r\n  time: null,\r\n  patient: '',\r\n};\r\n\r\nconst defaultLoading: Loading = {\r\n  doctors: false,\r\n  times: false,\r\n  register: false,\r\n};\r\n\r\nconst Registration = () => {\r\n  const [open, setOpen] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<Loading>(defaultLoading);\r\n  const [doctors, setDoctors] = useState<Doctor[]>([]);\r\n  const [times, setTimes] = useState<Time[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      setLoading({ ...loading, doctors: true });\r\n      const { data } = await client.get<Doctor[]>('doctors');\r\n      setLoading({ ...loading, doctors: false });\r\n      setDoctors(data);\r\n    };\r\n\r\n    const fetchTimes = async () => {\r\n      setLoading({ ...loading, times: true });\r\n      const { data } = await client.get<Time[]>('times');\r\n      setLoading({ ...loading, times: false });\r\n      setTimes(data);\r\n    };\r\n\r\n    fetchDoctors();\r\n    fetchTimes();\r\n  }, []);\r\n\r\n  const { register, handleSubmit, errors, control, reset } = useForm<RegForm>({ defaultValues });\r\n\r\n  const onSubmit = async (data: RegForm) => {\r\n    setLoading({ ...loading, register: true });\r\n    await client.post('schedule', data);\r\n    const newTimes = times.map((i) => {\r\n      if (i.id == data.time?.id) {\r\n        i.allowed = false;\r\n      }\r\n      return i;\r\n    });\r\n    setTimes(newTimes);\r\n    setLoading({ ...loading, register: false });\r\n    reset();\r\n    setOpen(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Typography className=\"reg__title\" variant=\"h5\">\r\n        Запись на прием\r\n      </Typography>\r\n      <Card className=\"reg\">\r\n        {loading.register && <LinearProgress color=\"secondary\" />}\r\n        <CardContent>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <FormControl fullWidth>\r\n              <TextField\r\n                label=\"ФИО пациента\"\r\n                placeholder=\"Введите сюда ваше ФИО\"\r\n                variant=\"outlined\"\r\n                name=\"patient\"\r\n                helperText={errors.patient && 'Поле ФИО обязательно к заполнению'}\r\n                inputRef={register({ required: true })}\r\n                error={!!errors.patient}\r\n              />\r\n            </FormControl>\r\n            <FormControl fullWidth margin=\"normal\">\r\n              <Controller\r\n                name=\"doctor\"\r\n                rules={{ required: true }}\r\n                control={control}\r\n                render={(props) => (\r\n                  <Autocomplete\r\n                    {...props}\r\n                    onChange={(_, doctor) => props.onChange(doctor)}\r\n                    getOptionSelected={(val, option) => val.id === option.id}\r\n                    options={doctors}\r\n                    getOptionLabel={(option) => option.full_name}\r\n                    loading={loading.doctors}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        error={!!errors.doctor}\r\n                        helperText={errors.doctor && 'Вы должы указать к кому хотите записаться'}\r\n                        label=\"ФИО доктора\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    )}\r\n                    renderOption={(option, { inputValue }) => {\r\n                      const matches = match(option.full_name, inputValue);\r\n                      const parts = parse(option.full_name, matches);\r\n\r\n                      return (\r\n                        <div>\r\n                          {parts.map((part, index) => (\r\n                            <span key={`highlight_${index}`} style={part.highlight ? { fontWeight: 600, background: '#faea2d' } : {}}>\r\n                              {part.text}\r\n                            </span>\r\n                          ))}\r\n                        </div>\r\n                      );\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </FormControl>\r\n            <FormControl fullWidth margin=\"normal\">\r\n              <Controller\r\n                name=\"time\"\r\n                rules={{ required: true }}\r\n                control={control}\r\n                render={(props) => (\r\n                  <Autocomplete\r\n                    {...props}\r\n                    onChange={(_, doctor) => props.onChange(doctor)}\r\n                    getOptionSelected={(val, option) => val.id === option.id}\r\n                    options={times}\r\n                    getOptionLabel={(option) => option.humanVariant}\r\n                    loading={loading.times}\r\n                    getOptionDisabled={(option) => !option.allowed}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        error={!!errors.time}\r\n                        helperText={errors.time && 'Вы должы указать время на которое хотите записаться'}\r\n                        label=\"Дата и время записи на прием\"\r\n                        variant=\"outlined\"\r\n                      />\r\n                    )}\r\n                    renderOption={(option, { inputValue }) => {\r\n                      const matches = match(option.humanVariant, inputValue);\r\n                      const parts = parse(option.humanVariant, matches);\r\n\r\n                      return (\r\n                        <div>\r\n                          {parts.map((part, index) => (\r\n                            <span key={index} style={part.highlight ? { fontWeight: 600, background: '#faea2d' } : {}}>\r\n                              {part.text}\r\n                            </span>\r\n                          ))}\r\n                        </div>\r\n                      );\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </FormControl>\r\n\r\n            <FormControl fullWidth margin=\"normal\">\r\n              <TextField label=\"Жалобы\" variant=\"outlined\" name=\"complaints\" inputRef={register} multiline rows={4} />\r\n            </FormControl>\r\n\r\n            <FormControl margin=\"normal\">\r\n              <Button variant=\"contained\" color=\"secondary\" type=\"submit\">\r\n                Записаться на прием\r\n              </Button>\r\n            </FormControl>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={() => setOpen(false)}>\r\n        <MuiAlert onClose={() => setOpen(false)} severity=\"success\">\r\n          Вы успешно записались к врачу!\r\n        </MuiAlert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { Registration };\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport { Toolbar, Container, AppBar, Button, CssBaseline } from '@material-ui/core';\r\nimport { Schedule } from './pages/Schedule';\r\nimport { Registration } from './pages/Registration';\r\nimport './styles/App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <CssBaseline />\r\n      <Router>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Container maxWidth=\"lg\">\r\n              <Button color=\"inherit\" component={Link} to=\"/\">\r\n                Запись на прием\r\n              </Button>\r\n              <Button color=\"inherit\" component={Link} to=\"/schedule\">\r\n                Расписание\r\n              </Button>\r\n            </Container>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container maxWidth=\"lg\" className=\"app__content\">\r\n          <Route path=\"/\" exact>\r\n            <Registration />\r\n          </Route>\r\n          <Route path=\"/schedule\" exact>\r\n            <Schedule />\r\n          </Route>\r\n        </Container>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'fontsource-roboto';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}